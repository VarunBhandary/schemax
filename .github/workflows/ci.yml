name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 6 * * 1'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r schemax/ -f json -o bandit-report.json || true
        bandit -r schemax/ -f txt

    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check --full-report

    - name: Run pip-audit for additional dependency scanning
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --format text || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  # Code quality and linting job
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Black formatting check
      run: black --check --diff schemax/ tests/

    - name: Run isort import sorting check
      run: isort --check-only --diff schemax/ tests/

    - name: Run pylint
      run: pylint schemax/

  # Testing job
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        pytest --cov=schemax --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build and package job
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [security, lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        python --version
        pip list

    - name: Build package
      run: |
        python -m build --no-isolation
        ls -la dist/

    - name: Check package
      run: |
        twine check dist/*
        echo "Package validation passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  # Integration tests job
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run integration tests
      run: |
        pytest tests/ -m integration --verbose
      env:
        # Add any required environment variables for integration tests
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

  # Documentation job
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Build documentation
      run: |
        cd docs
        make html
      continue-on-error: true

  # Release job (only on main branch with tags)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [security, lint, test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        username: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Dependency review (for PRs) - DISABLED
  # NOTE: This job requires GitHub Advanced Security to be enabled on the repository.
  # To enable it, go to Settings > Security & analysis > Dependency graph and enable it.
  # For private repositories, GitHub Advanced Security license is also required.
  #
  # Alternative: The security job above already runs safety and pip-audit for dependency scanning
  # which provides similar functionality without requiring GitHub Advanced Security.
  # dependency-review:
  #   name: Dependency Review
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   continue-on-error: true  # Don't fail the entire workflow if this step fails

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v4

  #   - name: Dependency Review
  #     uses: actions/dependency-review-action@v3
  #     with:
  #       fail-on-severity: moderate
